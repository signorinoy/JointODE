[{"path":[]},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement meetziyang@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"http://gongziyang.com/JointODE/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"http://gongziyang.com/JointODE/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Ziyang Gong Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/articles/data-simulation.html","id":"longitudinal-model","dir":"Articles","previous_headings":"Review of Model Setup","what":"Longitudinal Model","title":"Data Simulation","text":"biomarker evolution follows second-order ODE system: \\ddot{m}_i(t) = g(\\boldsymbol{\\beta}^{\\top}\\mathbf{Z}_i(t)) : m_i(t): Latent biomarker trajectory subject \\mathbf{Z}_i(t) = (m_i(t), \\dot{m}_i(t), \\mathbf{X}_i(t)^{\\top}, t)^{\\top}: Augmented state vector position, velocity, covariates, time Observed measurements: V_{ij} = m_i(T_{ij}) + b_i + \\varepsilon_{ij} b_i \\sim N(0, \\sigma_b^2) (random intercept) \\varepsilon_{ij} \\sim N(0, \\sigma_e^2) (measurement error).","code":""},{"path":"http://gongziyang.com/JointODE/articles/data-simulation.html","id":"survival-model","dir":"Articles","previous_headings":"Review of Model Setup","what":"Survival Model","title":"Data Simulation","text":"hazard function incorporates trajectory dynamics: \\lambda_i(t|b_i) = \\lambda_0(t) \\exp[\\boldsymbol{\\alpha}^{\\top}\\mathbf{m}_i(t) + \\mathbf{W}_i^{\\top}\\boldsymbol{\\phi} + b_i] : \\lambda_0(t) baseline hazard function \\mathbf{m}_i(t) = (m_i(t), \\dot{m}_i(t), \\ddot{m}_i(t))^{\\top}: Trajectory features (value, velocity, acceleration) \\mathbf{W}_i: Baseline covariates b_i: Subject-specific random intercept","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"http://gongziyang.com/JointODE/articles/data-simulation.html","id":"dependencies-and-setup","dir":"Articles","previous_headings":"Implementation","what":"Dependencies and Setup","title":"Data Simulation","text":"","code":"# Load required packages library(deSolve) # ODE numerical integration library(simsurv) # Flexible survival simulation library(ggplot2) # Visualization  # Set random seed for reproducibility set.seed(123)"},{"path":"http://gongziyang.com/JointODE/articles/data-simulation.html","id":"parameter-configuration","dir":"Articles","previous_headings":"Implementation","what":"Parameter Configuration","title":"Data Simulation","text":"","code":"#' Configure simulation parameters #' #' @param n Sample size #' @param sigma_b Random effect standard deviation #' @param sigma_e Measurement error standard deviation #' @param alpha Association parameters (3-vector) #' @param beta Index weights (5-vector, normalized internally) #' @param phi Baseline covariate effects (2-vector) #' @return List of simulation parameters setup_simulation_params <- function(     n = 200,     sigma_b = 0.5,     sigma_e = 0.1,     alpha = c(0.3, 0.1, -0.05),     beta = c(-0.3, -0.5, 0.2, 0.1, 0.05),     phi = c(0.2, -0.15)) {   # Normalize beta for identifiability   beta_norm <- beta / sqrt(sum(beta^2))    list(     n = n,     sigma_b = sigma_b,     sigma_e = sigma_e,     alpha = alpha,     beta = beta_norm,     phi = phi   ) }"},{"path":"http://gongziyang.com/JointODE/articles/data-simulation.html","id":"core-model-functions","dir":"Articles","previous_headings":"Implementation","what":"Core Model Functions","title":"Data Simulation","text":"","code":"#' Nonlinear link function #' #' @param u Single index value #' @return Transformed value in [-0.5, 0.5] g_function <- function(u) {   0.5 * tanh(u / 3) }  #' Weibull baseline hazard #' #' @param t Time point #' @param shape Shape parameter (>1 for increasing hazard) #' @param scale Scale parameter #' @return Hazard value at time t baseline_hazard <- function(t, shape = 1.5, scale = 8) {   (shape / scale) * (t / scale)^(shape - 1) }"},{"path":"http://gongziyang.com/JointODE/articles/data-simulation.html","id":"ode-system-definition","dir":"Articles","previous_headings":"Implementation","what":"ODE System Definition","title":"Data Simulation","text":"","code":"#' ODE system for biomarker dynamics #' #' @param t Current time #' @param state State vector [m, m_dot] #' @param params List containing beta, X_func, g_func #' @return List of derivatives ode_system <- function(t, state, params) {   m <- state[1] # Position   m_dot <- state[2] # Velocity    # Time-varying covariates   x_t <- if (!is.null(params$x_func)) {     params$x_func(t)   } else {     c(0, 0)   }    # Augmented state vector   z <- c(m, m_dot, x_t, t)    # Single index model   u <- sum(params$beta * z)   m_ddot <- params$g_func(u)    list(c(m_dot, m_ddot)) }"},{"path":"http://gongziyang.com/JointODE/articles/data-simulation.html","id":"trajectory-generation","dir":"Articles","previous_headings":"Implementation","what":"Trajectory Generation","title":"Data Simulation","text":"","code":"#' Generate individual trajectory #' #' @param i Subject index #' @param params Simulation parameters #' @param tmax Maximum follow-up time #' @return List with trajectory functions and data generate_trajectory <- function(i, params, tmax = 10) {   # Random effect   b_i <- rnorm(1, 0, params$sigma_b)    # Baseline covariates   w_i <- c(     rnorm(1, 0, 1), # Continuous (e.g., age)     rbinom(1, 1, 0.5) # Binary (e.g., treatment)   )    # Time-varying covariate functions   x_func <- function(t) {     c(       exp(-t / 5), # Treatment decay       0.2 * sin(2 * pi * t) # Seasonal effect     )   }    # Initial conditions   m_0 <- 0   m_dot_0 <- 0    # ODE parameters   ode_params <- list(     beta = params$beta,     x_func = x_func,     g_func = g_function   )    # Numerical integration   times <- seq(0, tmax, by = 0.05)   sol <- ode(     y = c(m = m_0, m_dot = m_dot_0),     times = times,     func = ode_system,     parms = ode_params,     method = \"lsoda\"   )    # Interpolation functions   m_func <- approxfun(sol[, 1], sol[, 2], rule = 2)   m_dot_func <- approxfun(sol[, 1], sol[, 3], rule = 2)    # Acceleration computation   x_vals <- t(sapply(sol[, 1], x_func))   z_mat <- cbind(sol[, 2], sol[, 3], x_vals, sol[, 1])   u_vals <- z_mat %*% params$beta   m_ddot_vals <- g_function(as.vector(u_vals))   m_ddot_func <- approxfun(sol[, 1], m_ddot_vals, rule = 2)    list(     id = i,     b_i = b_i,     w_i = w_i,     x_func = x_func,     m_func = m_func,     m_dot_func = m_dot_func,     m_ddot_func = m_ddot_func,     trajectory = as.data.frame(sol)   ) }"},{"path":"http://gongziyang.com/JointODE/articles/data-simulation.html","id":"survival-time-generation","dir":"Articles","previous_headings":"Implementation","what":"Survival Time Generation","title":"Data Simulation","text":"","code":"#' Generate survival times using simsurv #' #' @param trajectories List of trajectory objects #' @param params Simulation parameters #' @return Data frame with survival times and censoring indicators generate_survival_times <- function(trajectories, params) {   # Covariate data   covdat <- data.frame(     id = seq_along(trajectories),     b_i = sapply(trajectories, function(x) x$b_i),     w1 = sapply(trajectories, function(x) x$w_i[1]),     w2 = sapply(trajectories, function(x) x$w_i[2])   )    # Time-dependent hazard   hazard_func <- function(t, x, betas, ...) {     idx <- round(as.numeric(x[\"id\"]))     traj <- trajectories[[idx]]      # Trajectory evaluation     m_t <- traj$m_func(t)     m_dot_t <- traj$m_dot_func(t)     m_ddot_t <- traj$m_ddot_func(t)      # Hazard computation     h0 <- baseline_hazard(t, shape = 1.5, scale = 8)      log_hazard <- log(h0) +       params$alpha[1] * m_t +       params$alpha[2] * m_dot_t +       params$alpha[3] * m_ddot_t +       x[\"b_i\"] +       betas[\"w1\"] * x[\"w1\"] +       betas[\"w2\"] * x[\"w2\"]      exp(log_hazard)   }    # Generate event times   surv_times <- simsurv(     hazard = hazard_func,     x = covdat,     betas = c(w1 = params$phi[1], w2 = params$phi[2]),     maxt = 10,     interval = c(1e-8, 15)   )    # Administrative censoring   cens_times <- runif(     nrow(covdat),     min = quantile(surv_times$eventtime, 0.5),     max = quantile(surv_times$eventtime, 0.95)   )    surv_times$obstime <- pmin(surv_times$eventtime, cens_times)   surv_times$status <- as.numeric(surv_times$eventtime <= cens_times)    surv_times }"},{"path":"http://gongziyang.com/JointODE/articles/data-simulation.html","id":"longitudinal-measurement-process","dir":"Articles","previous_headings":"Implementation","what":"Longitudinal Measurement Process","title":"Data Simulation","text":"","code":"#' Generate longitudinal measurements #' #' @param trajectories List of trajectory objects #' @param surv_times Survival data frame #' @param params Simulation parameters #' @return Data frame with longitudinal observations generate_longitudinal_data <- function(trajectories, surv_times, params) {   long_data <- list()    for (i in seq_along(trajectories)) {     traj <- trajectories[[i]]     t_i <- surv_times$obstime[i]      # Measurement schedule     if (t_i <= 2) {       visit_times <- seq(0, t_i, by = 0.25)     } else {       quarterly <- seq(0, 2, by = 0.25)       if (t_i > 2.5) {         semiannual <- seq(2.5, t_i, by = 0.5)         visit_times <- c(quarterly, semiannual)       } else {         visit_times <- quarterly       }     }      # Introduce random missingness     visit_times <- visit_times[runif(length(visit_times)) > 0.1]      # Ensure baseline measurement     if (length(visit_times) == 0) visit_times <- 0      # Measurements with error and covariates     measurements <- numeric(length(visit_times))     x1_obs <- numeric(length(visit_times))     x2_obs <- numeric(length(visit_times))      for (j in seq_along(visit_times)) {       m_true <- traj$m_func(visit_times[j])       measurements[j] <- m_true + traj$b_i + rnorm(1, 0, params$sigma_e)        # Store covariate values at observation times       x_vals <- traj$x_func(visit_times[j])       x1_obs[j] <- x_vals[1]       x2_obs[j] <- x_vals[2]     }      long_data[[i]] <- data.frame(       id = traj$id,       time = visit_times,       value = measurements,       x1 = x1_obs, # Treatment effect       x2 = x2_obs, # Seasonal effect       b_true = traj$b_i     )   }    do.call(rbind, long_data) }"},{"path":"http://gongziyang.com/JointODE/articles/data-simulation.html","id":"main-simulation-interface","dir":"Articles","previous_headings":"Implementation","what":"Main Simulation Interface","title":"Data Simulation","text":"","code":"#' Simulate joint ODE model data #' #' @param n Sample size #' @param seed Random seed #' @return List containing longitudinal and survival datasets simulate_joint_ode_data <- function(n = 200, seed = 123) {   set.seed(seed)    # Initialize   params <- setup_simulation_params(n = n)    # Generate trajectories   message(\"Step 1/3: Generating ODE trajectories...\")   trajectories <- lapply(seq_len(n), generate_trajectory, params = params)    # Generate survival   message(\"Step 2/3: Generating survival times...\")   surv_data <- generate_survival_times(trajectories, params)    # Report censoring   actual_censoring <- 1 - mean(surv_data$status)   message(sprintf(\"  Achieved censoring: %.1f%%\", actual_censoring * 100))    # Generate longitudinal   message(\"Step 3/3: Generating longitudinal data...\")   long_data <- generate_longitudinal_data(trajectories, surv_data, params)    # Merge covariates   baseline_data <- data.frame(     id = seq_len(n),     w1 = sapply(trajectories, function(x) x$w_i[1]),     w2 = sapply(trajectories, function(x) x$w_i[2]),     b_true = sapply(trajectories, function(x) x$b_i)   )    surv_data <- merge(surv_data, baseline_data, by = \"id\")    # Return datasets   structure(     list(       long_data = long_data,       surv_data = surv_data,       params = params,       trajectories = trajectories     ),     class = \"joint_ode_data\"   ) }"},{"path":"http://gongziyang.com/JointODE/articles/data-simulation.html","id":"usage-example","dir":"Articles","previous_headings":"","what":"Usage Example","title":"Data Simulation","text":"","code":"# Generate synthetic dataset sim_data <- simulate_joint_ode_data(n = 200, seed = 123) #> Step 1/3: Generating ODE trajectories... #> Step 2/3: Generating survival times... #>   Achieved censoring: 35.0% #> Step 3/3: Generating longitudinal data...  # Extract components long_data <- sim_data$long_data surv_data <- sim_data$surv_data  # Dataset overview cat(\"\\n========== Dataset Summary ==========\\n\") #>  #> ========== Dataset Summary ========== cat(sprintf(\"Total subjects: %d\\n\", nrow(surv_data))) #> Total subjects: 200 cat(sprintf(\"Total observations: %d\\n\", nrow(long_data))) #> Total observations: 2783 cat(sprintf(   \"Avg obs/subject: %.1f (range: %d-%d)\\n\",   nrow(long_data) / nrow(surv_data),   min(table(long_data$id)),   max(table(long_data$id)) )) #> Avg obs/subject: 13.9 (range: 2-23)  cat(\"\\n---------- Event Statistics ----------\\n\") #>  #> ---------- Event Statistics ---------- cat(sprintf(   \"Events: %d (%.1f%%)\\n\",   sum(surv_data$status),   mean(surv_data$status) * 100 )) #> Events: 130 (65.0%) cat(sprintf(   \"Censored: %d (%.1f%%)\\n\",   sum(1 - surv_data$status),   mean(1 - surv_data$status) * 100 )) #> Censored: 70 (35.0%)  cat(\"\\n---------- Follow-up Time ----------\\n\") #>  #> ---------- Follow-up Time ---------- cat(sprintf(\"Median: %.2f years\\n\", median(surv_data$obstime))) #> Median: 6.07 years cat(sprintf(   \"Range: %.2f - %.2f years\\n\",   min(surv_data$obstime),   max(surv_data$obstime) )) #> Range: 0.40 - 9.75 years  cat(\"\\n---------- Data Structure ----------\\n\") #>  #> ---------- Data Structure ---------- cat(\"Longitudinal columns:\", paste(names(long_data), collapse = \", \"), \"\\n\") #> Longitudinal columns: id, time, value, x1, x2, b_true cat(\"Survival columns:\", paste(names(surv_data), collapse = \", \"), \"\\n\") #> Survival columns: id, eventtime, status, obstime, w1, w2, b_true"},{"path":"http://gongziyang.com/JointODE/articles/data-simulation.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Data Simulation","text":"Representative trajectories","code":"# Select subjects set.seed(123) sample_ids <- sample(unique(long_data$id), 6) plot_data <- long_data[long_data$id %in% sample_ids, ] plot_data <- merge(   plot_data,   surv_data[, c(\"id\", \"obstime\", \"status\")],   by = \"id\" )  # Create plot ggplot(plot_data, aes(x = time, y = value)) +   geom_line(aes(color = factor(id)), alpha = 0.7, linewidth = 0.8) +   geom_point(aes(color = factor(id)), size = 1.5, alpha = 0.8) +   geom_vline(     data = unique(plot_data[, c(\"id\", \"obstime\", \"status\")]),     aes(xintercept = obstime, linetype = factor(status)),     alpha = 0.4, linewidth = 0.7   ) +   scale_linetype_manual(     values = c(\"0\" = \"dashed\", \"1\" = \"solid\"),     labels = c(\"Censored\", \"Event\"),     name = \"Outcome\"   ) +   facet_wrap(~ paste(\"Subject\", id), scales = \"free_y\", ncol = 3) +   labs(     x = \"Time (years)\",     y = \"Biomarker Value\",     title = \"Simulated Longitudinal Trajectories\",     subtitle = \"Vertical lines: event (solid) or censoring (dashed)\"   ) +   theme_minimal() +   theme(     legend.position = \"bottom\",     strip.background = element_rect(fill = \"gray95\", color = NA),     strip.text = element_text(face = \"bold\")   ) +   guides(color = \"none\")"},{"path":"http://gongziyang.com/JointODE/articles/getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started","text":"JointODE package implements joint modeling longitudinal biomarker trajectories survival outcomes using ordinary differential equations (ODEs). approach captures complex biomarker dynamics accounting association event times.","code":""},{"path":"http://gongziyang.com/JointODE/articles/getting-started.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting Started","text":"","code":"# Install from GitHub devtools::install_github(\"yourusername/JointODE\")  # Load the package library(JointODE)"},{"path":[]},{"path":"http://gongziyang.com/JointODE/articles/getting-started.html","id":"data-preparation","dir":"Articles","previous_headings":"Quick Start","what":"Data Preparation","title":"Getting Started","text":"package requires two data frames: Longitudinal data: Repeated biomarker measurements Survival data: Time--event outcomes","code":"# Example longitudinal data structure # id: subject identifier # time: measurement time # value: biomarker value head(long_data)  # Example survival data structure # id: subject identifier # obstime: observation time # status: event indicator (1=event, 0=censored) # w1, w2: baseline covariates head(surv_data)"},{"path":"http://gongziyang.com/JointODE/articles/getting-started.html","id":"model-fitting","dir":"Articles","previous_headings":"Quick Start","what":"Model Fitting","title":"Getting Started","text":"","code":"# Fit joint ODE model fit <- JointODE(   long_data = long_data,   surv_data = surv_data,   long_formula = value ~ time,   surv_formula = Surv(obstime, status) ~ w1 + w2,   id_var = \"id\",   time_var = \"time\" )  # View results summary(fit)"},{"path":"http://gongziyang.com/JointODE/articles/getting-started.html","id":"model-diagnostics","dir":"Articles","previous_headings":"Quick Start","what":"Model Diagnostics","title":"Getting Started","text":"","code":"# Check convergence plot(fit, type = \"convergence\")  # Residual diagnostics plot(fit, type = \"residuals\")  # Fitted trajectories plot(fit, type = \"trajectories\", subjects = 1:6)"},{"path":"http://gongziyang.com/JointODE/articles/getting-started.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Getting Started","text":"See vignette(\"technical-details\") mathematical formulation See vignette(\"data-simulation\") generating synthetic data Check ?JointODE detailed function documentation","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Technical Details","text":"vignette provides mathematical computational details joint ODE model implementation.","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"state-space-representation","dir":"Articles","previous_headings":"Model Formulation","what":"State Space Representation","title":"Technical Details","text":"joint model formulated first-order ODE system: \\frac{\\mathrm{d}\\mathbf{s}_i}{\\mathrm{d}t}=F(t,\\mathbf{s}_i(t),\\boldsymbol{\\Theta}) State vector: \\mathbf{s}_i(t)=(\\Lambda_i(t), m_i(t), \\dot{m}_i(t))^{\\top}","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"dynamics","dir":"Articles","previous_headings":"Model Formulation","what":"Dynamics","title":"Technical Details","text":"biomarker acceleration follows single index model: \\ddot{m}_i(t) = g(\\boldsymbol{\\beta}^{\\top}\\mathbf{Z}_i(t)) : \\mathbf{Z}_i(t) = (m_i(t), \\dot{m}_i(t), \\mathbf{X}_i(t)^{\\top}, t)^{\\top} \\\\mathbb{R}^{p+3} g(u) = \\boldsymbol{\\theta}^{\\top} \\mathbf{B}^{(g)}(u) (B-spline basis) ODE system: \\frac{d\\mathbf{s}_i}{dt} = \\begin{pmatrix} \\lambda_i(t|b_i) \\\\ \\dot{m}_i(t) \\\\ g(\\boldsymbol{\\beta}^{\\top}\\mathbf{Z}_i(t)) \\end{pmatrix} Hazard function: \\lambda_i(t|b_i) = \\exp[\\boldsymbol{\\eta}^{\\top} \\mathbf{B}^{(\\lambda)}(t) + \\boldsymbol{\\alpha}^{\\top}\\mathbf{m}_i(t) + b_{}+\\mathbf{W}_i^{\\top}\\boldsymbol{\\phi}] \\mathbf{m}_i(t) = (m_i(t), \\dot{m}_i(t), \\ddot{m}_i(t))^{\\top}. Initial conditions: \\mathbf{s}_i(0) = (0, m_{i0}, \\dot{m}_{i0})^{\\top}","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"data-and-parameters","dir":"Articles","previous_headings":"Likelihood","what":"Data and Parameters","title":"Technical Details","text":"Observed: \\mathcal{O}_i = (\\mathbf{V}_i, \\mathbf{X}_i, \\mathbf{W}_i, T_i, \\delta_i) Random effect: b_i \\sim N(0, \\sigma_b^2) Parameters: \\boldsymbol{\\Theta} = (\\boldsymbol{\\theta}, \\boldsymbol{\\beta}, \\boldsymbol{\\eta}, \\boldsymbol{\\alpha}, \\boldsymbol{\\phi}, \\sigma_e^2, \\sigma_b^2)","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"likelihood-components","dir":"Articles","previous_headings":"Likelihood","what":"Likelihood Components","title":"Technical Details","text":"Longitudinal: f(\\mathbf{V}_i | b_i) = \\prod_{j=1}^{n_i} \\phi(V_{ij}; m_i(T_{ij}) + b_i, \\sigma_e^2) Survival: f(T_i, \\delta_i | b_i) = [\\lambda_i(T_i|b_i)]^{\\delta_i} \\exp[-\\Lambda_i(T_i|b_i)] \\Lambda_i(t|b_i) = \\int_0^t \\lambda_i(s|b_i)ds. Random effect: f(b_i) = \\phi(b_i; 0, \\sigma_b^2)","code":""},{"path":[]},{"path":[]},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"e-step","dir":"Articles","previous_headings":"Estimation > EM Algorithm","what":"E-Step","title":"Technical Details","text":"Q-function: Q(\\boldsymbol{\\Theta}|\\boldsymbol{\\Theta}^{(k)}) = Q_L + Q_S + Q_R Q_L = -\\frac{N}{2}\\log(2\\pi\\sigma_e^2) - \\frac{1}{2\\sigma_e^2}\\sum_{,j}[(V_{ij} - m_i(T_{ij}) - \\hat{b}_i)^2 + \\hat{v}_i] Q_S = \\sum_{} \\{\\delta_i[\\log\\lambda_i(T_i|\\hat{b}_i)] - \\hat{\\Lambda}_i(T_i)\\} Q_R = -\\frac{n}{2}\\log(2\\pi\\sigma_b^2) - \\frac{1}{2\\sigma_b^2}\\sum_{}(\\hat{b}_i^2 + \\hat{v}_i) Algorithm subject : Solve ODE: Integrate t=0 T_i obtain m_i(t), \\dot{m}_i(t), \\ddot{m}_i(t) Find posterior mode \\tilde{b}_i: Maximize \\ell_i(b) = -\\frac{1}{2\\sigma_e^2}\\sum_j(V_{ij} - m_i(T_{ij}) - b)^2 + \\delta_i\\log\\lambda_i(T_i|b) - \\Lambda_i(T_i|b) - \\frac{b^2}{2\\sigma_b^2} Newton update: b \\leftarrow b - \\nabla_b/H_b : \\nabla_b = \\frac{1}{\\sigma_e^2}\\sum_j(V_{ij} - m_i(T_{ij}) - b) + \\delta_i - \\Lambda_i(T_i|b)e^b - \\frac{b}{\\sigma_b^2} H_b = -\\frac{n_i}{\\sigma_e^2} - \\Lambda_i(T_i|b)e^b - \\frac{1}{\\sigma_b^2} Compute posterior moments via Gauss-Hermite quadrature: Points: b_q = \\tilde{b}_i + \\sqrt{2\\tilde{v}_i} x_q \\tilde{v}_i = -1/H_b|_{\\tilde{b}_i} Weights: w_{iq} \\propto w_q \\cdot p(\\mathcal{O}_i|b_q) \\cdot p(b_q) Moments: \\hat{b}_i = \\sum_q w_{iq} b_q, \\hat{v}_i = \\sum_q w_{iq}(b_q - \\hat{b}_i)^2","code":""},{"path":"http://gongziyang.com/JointODE/articles/technical-details.html","id":"m-step","dir":"Articles","previous_headings":"Estimation > EM Algorithm","what":"M-Step","title":"Technical Details","text":"1. Longitudinal parameters (\\boldsymbol{\\theta}, \\boldsymbol{\\beta}): \\min_{\\boldsymbol{\\theta}, \\boldsymbol{\\beta}} \\sum_{,j} [V_{ij} - m_i(T_{ij}; \\boldsymbol{\\theta}, \\boldsymbol{\\beta}) - \\hat{b}_i]^2 Use L-BFGS sensitivity equations gradients. 2. Measurement variance: \\sigma_e^2 = \\frac{1}{N}\\sum_{,j} [(V_{ij} - m_i(T_{ij}) - \\hat{b}_i)^2 + \\hat{v}_i] 3. Survival parameters (\\boldsymbol{\\eta}, \\boldsymbol{\\alpha}, \\boldsymbol{\\phi}): \\max \\sum_i \\{\\delta_i \\log\\lambda_i(T_i|\\hat{b}_i) - \\hat{\\Lambda}_i(T_i)\\} Gradients (c_i = \\exp(\\hat{v}_i/2) variance correction): - \\nabla_{\\boldsymbol{\\alpha}} = \\sum_i [\\delta_i \\mathbf{m}_i(T_i) - c_i\\int_0^{T_i} \\mathbf{m}_i(s)\\lambda_i(s|\\hat{b}_i)ds] - \\nabla_{\\boldsymbol{\\eta}} = \\sum_i [\\delta_i \\mathbf{B}^{(\\lambda)}(T_i) - c_i\\int_0^{T_i} \\mathbf{B}^{(\\lambda)}(s)\\lambda_i(s|\\hat{b}_i)ds] - \\nabla_{\\boldsymbol{\\phi}} = \\sum_i [\\delta_i \\mathbf{W}_i - c_i\\mathbf{W}_i\\Lambda_i(T_i|\\hat{b}_i)] 4. Random effect variance: \\sigma_b^2 = \\frac{1}{n}\\sum_i (\\hat{b}_i^2 + \\hat{v}_i)","code":""},{"path":"http://gongziyang.com/JointODE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ziyang Gong. Author, maintainer.","code":""},{"path":"http://gongziyang.com/JointODE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gong Z (2025). JointODE: Joint Modeling Longitudinal Survival Data Using ODEs. R package version 0.0.0.9000, https://github.com/signorinoy/JointODE.","code":"@Manual{,   title = {JointODE: Joint Modeling of Longitudinal and Survival Data Using ODEs},   author = {Ziyang Gong},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/signorinoy/JointODE}, }"},{"path":"http://gongziyang.com/JointODE/index.html","id":"jointode","dir":"","previous_headings":"","what":"Joint Modeling of Longitudinal and Survival Data Using ODEs","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"JointODE package provides unified framework joint modeling longitudinal biomarker measurements time--event outcomes using ordinary differential equations (ODEs). approach enables simultaneous analysis biomarker trajectories impact survival outcomes.","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/index.html","id":"longitudinal-model","dir":"","previous_headings":"Model Setup","what":"Longitudinal Model","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"observed biomarker measurements modeled : V_{ij}=m_i(T_{ij})+b_i+\\varepsilon_{ij},\\quad =1,\\ldots,n,\\quad j=1,\\ldots,n_i : V_{ij}: Observed biomarker value subject time T_{ij} m_i(t): True underlying biomarker trajectory b_i\\sim\\mathcal{N}(0,\\sigma_{b}^{2}): Subject-specific random intercept \\varepsilon_{ij}\\sim\\mathcal{N}(0,\\sigma_{e}^{2}): Measurement error biomarker trajectory evolution characterized following second-order differential equation: \\ddot{m}_i(t) = f\\big(m_i(t), \\dot{m}_i(t), \\mathbf{X}_i(t), t\\big) f: \\mathbb{R} \\times \\mathbb{R} \\times \\mathbb{R}^p \\times \\mathbb{R}^+ \\\\mathbb{R} smooth function modeling biomarker acceleration function current value m_i(t), velocity \\dot{m}_i(t), time-varying covariates \\mathbf{X}_i(t) \\\\mathbb{R}^p, time t.","code":""},{"path":"http://gongziyang.com/JointODE/index.html","id":"survival-model","dir":"","previous_headings":"Model Setup","what":"Survival Model","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"hazard function incorporates biomarker dynamics: \\lambda_i(t) = \\lambda_{0}(t)\\exp\\left[\\mathbf{m}_i(t)^{\\top}\\boldsymbol{\\alpha}+\\mathbf{W}_i^{\\top}\\boldsymbol{\\phi}+b_{}\\right] : \\lambda_{0}(t): Baseline hazard (e.g., Weibull, piecewise constant) \\mathbf{m}_i(t)=\\left(m_i(t), \\dot{m}_i(t), \\ddot{m}_i(t)\\right)^{\\top}: Biomarker value derivatives \\boldsymbol{\\alpha}=(\\alpha_0, \\alpha_1, \\alpha_2)^{\\top}: Association parameters value, velocity, acceleration \\mathbf{W}_i: Baseline covariates coefficients \\boldsymbol{\\phi} b_i: Subject-specific random intercept detailed mathematical derivations including ODE formulation, likelihood construction, EM algorithm specifics, see technical documentation.","code":""},{"path":"http://gongziyang.com/JointODE/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"can install development version JointODE GitHub :","code":"# install.packages(\"pak\") pak::pak(\"signorinoy/JointODE\")"},{"path":"http://gongziyang.com/JointODE/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"’s basic example demonstrating typical usage: Using README.Rmd instead README.md allows include executable R chunks: Remember render README.Rmd regularly keep README.md --date. Use devtools::build_readme() task. can also embed plots:  Remember commit push resulting figure files ensure display GitHub CRAN.","code":"library(JointODE) ## basic example code summary(cars) #>      speed           dist        #>  Min.   : 4.0   Min.   :  2.00   #>  1st Qu.:12.0   1st Qu.: 26.00   #>  Median :15.0   Median : 36.00   #>  Mean   :15.4   Mean   : 42.98   #>  3rd Qu.:19.0   3rd Qu.: 56.00   #>  Max.   :25.0   Max.   :120.00"},{"path":"http://gongziyang.com/JointODE/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Joint Modeling of Longitudinal and Survival Data Using ODEs","text":"Please note JointODE project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"http://gongziyang.com/JointODE/reference/JointODE-package.html","id":null,"dir":"Reference","previous_headings":"","what":"JointODE: Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE-package","title":"JointODE: Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE-package","text":"Implements joint modeling longitudinal biomarker trajectories time--event outcomes using ordinary differential equations (ODEs). package provides tools simultaneous analysis biomarker dynamics survival data, capturing complex temporal patterns ODE-based trajectory modeling accounting association event times shared random effects.","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/reference/JointODE-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"JointODE: Joint Modeling of Longitudinal and Survival Data Using ODEs — JointODE-package","text":"Maintainer: Ziyang Gong meetziyang@gmail.com","code":""},{"path":[]},{"path":"http://gongziyang.com/JointODE/news/index.html","id":"initial-release-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Initial Release","title":"JointODE 0.0.0.9000 (Development Version)","text":"Added basic package structure documentation Created data simulation vignette demonstrating intended modeling framework Included mathematical formulation technical details vignette Set testing infrastructure basic tests","code":""},{"path":"http://gongziyang.com/JointODE/news/index.html","id":"to-do-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"To Do","title":"JointODE 0.0.0.9000 (Development Version)","text":"Implement core estimation functions Add model fitting capabilities Include real data examples Expand test coverage","code":""}]
